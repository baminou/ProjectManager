package app;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.Properties;
import java.util.Vector;


public class ProjectManagerImplementation implements ProjectManagerInterface {
	
	private Properties _prop = new Properties();

	public ProjectManagerImplementation() throws RemoteException, IOException {
		super();
		InputStream input = getClass().getClassLoader().getResourceAsStream("config.properties");
		_prop.load(input);
	}

	@Override
	public String getScratchDirectory() throws RemoteException {
		return _prop.getProperty("scratch_directory");
	}

	@Override
	public String getArchiveDirectory() throws RemoteException {
		return _prop.getProperty("archive_directory");
	}

	@Override
	public FileTree getScratchTreeStructure() throws RemoteException {
		System.out.println(new File(_prop.getProperty("scratch_directory")));
		return new FileTree(new File(_prop.getProperty("scratch_directory")));
	}

	@Override
	public FileTree getArchiveTreeStructure() throws RemoteException {
		return new FileTree(new File(_prop.getProperty("archive_directory")));
	}

	@Override
	public void displayScratchFolder() throws RemoteException {
		displayIt(new File(_prop.getProperty("scratch_directory")));
	}

	@Override
	public void displayArchiveFolder() throws RemoteException {
		Vector<String> files = new Vector<String>();
		displayIt(new File(_prop.getProperty("archive_directory")));
	}
	
	public static void displayIt(File node, Vector files){
			if(node.isDirectory()){
				String[] subNote = node.list();
				for(String filename : subNote){
					displayIt(new File(node, filename));
				}
			}
			
		}

}
