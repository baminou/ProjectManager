


import java.io.IOException;
import java.io.InputStream;
import java.rmi.AlreadyBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Properties;

import app.ProjectManagerInterface;


public class Main implements ProjectManagerInterface {
	public static void main(String[] args){
		try {
			ProjectManagerImplementation obj = new ProjectManagerImplementation();
			ProjectManagerInterface stub = (ProjectManagerInterface) UnicastRemoteObject.exportObject(obj,0);
			
			Registry reg = LocateRegistry.getRegistry();
			reg.bind("project_manager", stub);
			
			for(String name: reg.list()){
				System.out.println(name);
			}
			
			
			
			System.out.println("Server is ready");
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (AlreadyBoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public String getScratchDirectory() throws RemoteException, IOException {
		Properties prop = new Properties();
		InputStream input = getClass().getClassLoader().getResourceAsStream("config.properties");
		prop.load(input);
		return prop.getProperty("scratch_directory");
	}

	@Override
	public String getArchiveDirectory() throws RemoteException, IOException {
		Properties prop = new Properties();
		InputStream input = getClass().getClassLoader().getResourceAsStream("config.properties");
		prop.load(input);
		return prop.getProperty("archive_directory");
	}
}
