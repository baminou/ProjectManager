package app;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.Properties;
import java.util.Vector;

import javax.swing.tree.TreePath;

import org.apache.commons.lang3.StringUtils;


public class ProjectManagerImplementation implements ProjectManagerInterface {
	
	private Properties _prop = new Properties();
	private FileTree _scratchTreeStructure;
	private FileTree _archiveTreeStructure;

	public ProjectManagerImplementation() throws RemoteException, IOException {
		super();
		InputStream input = getClass().getClassLoader().getResourceAsStream("config.properties");
		_prop.load(input);
		updateStructure();
	}

	@Override
	public String getScratchDirectory() throws RemoteException {
		return _prop.getProperty("scratch_directory");
	}

	@Override
	public String getArchiveDirectory() throws RemoteException {
		return _prop.getProperty("archive_directory");
	}

	@Override
	public FileTree getScratchTreeStructure() throws RemoteException {
		return _scratchTreeStructure;
	}

	@Override
	public FileTree getArchiveTreeStructure() throws RemoteException {
		return _archiveTreeStructure;
	}
	
	public void updateStructure() throws RemoteException{
		_scratchTreeStructure = new FileTree(this.getScratchPath());
		_archiveTreeStructure = new FileTree(this.getArchivePath());
	}

	@Override
	public void archivePath(TreePath tree) throws RemoteException, IOException, Exception {
		String scratch = getScratchDrive()+StringUtils.join(tree.getPath(), "/");
		String archive = this.getArchivePath();
		
		String[] command = ("rsync -aP "+scratch+" "+archive).split("\\s");
		System.out.println(command);
		Process proc = Runtime.getRuntime().exec(command);
		BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));
		String line = "";
		while((line = reader.readLine()) != null){
			System.out.println(line);
		}
		proc.waitFor();
	}

	@Override
	public String getScratchDrive() throws RemoteException {
		return _prop.getProperty("scratch_drive");
	}

	@Override
	public String getArchiveDrive() throws RemoteException {
		return _prop.getProperty("archive_drive");
	}

	@Override
	public String getScratchPath() throws RemoteException {
		return this.getScratchDrive()+this.getScratchDirectory();
	}

	@Override
	public String getArchivePath() throws RemoteException {
		return this.getArchiveDrive()+this.getArchiveDirectory();
	}

}
