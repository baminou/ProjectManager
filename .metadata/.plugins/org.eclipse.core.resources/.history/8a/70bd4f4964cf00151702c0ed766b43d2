package app;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.Properties;
import java.util.Vector;

import javax.swing.tree.TreePath;


public class ProjectManagerImplementation implements ProjectManagerInterface {
	
	private Properties _prop = new Properties();
	private FileTree _scratchTreeStructure;
	private FileTree _archiveTreeStructure;

	public ProjectManagerImplementation() throws RemoteException, IOException {
		super();
		InputStream input = getClass().getClassLoader().getResourceAsStream("config.properties");
		_prop.load(input);
		updateStructure();
	}

	@Override
	public String getScratchDirectory() throws RemoteException {
		return _prop.getProperty("scratch_directory");
	}

	@Override
	public String getArchiveDirectory() throws RemoteException {
		return _prop.getProperty("archive_directory");
	}

	@Override
	public FileTree getScratchTreeStructure() throws RemoteException {
		return _scratchTreeStructure;
	}

	@Override
	public FileTree getArchiveTreeStructure() throws RemoteException {
		return _archiveTreeStructure;
	}
	
	public void updateStructure(){
		_scratchTreeStructure = new FileTree(_prop.getProperty("scratch_directory"));
		_archiveTreeStructure = new FileTree(_prop.getProperty("archive_directory"));
	}

	@Override
	public void archivePath(TreePath tree) throws RemoteException {
		String[] cmd = new String[]{"rsync", "-aRP",  + "@" + HOST + ":" + REMOTE_FILE_ROOT, LOCAL_FILE_ROOT};
	}

}
