package app;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Properties;
import java.util.Vector;

import javax.swing.tree.TreePath;

import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.text.WordUtils;

import epi.Project;


public class ProjectManagerImplementation implements ProjectManagerInterface {
	
	private Properties _prop = new Properties();
	private FileTree _scratchTreeStructure;
	private FileTree _archiveTreeStructure;

	public ProjectManagerImplementation() throws RemoteException, IOException {
		super();
		InputStream input = getClass().getClassLoader().getResourceAsStream("config.properties");
		_prop.load(input);
		updateStructure();
	}

	@Override
	public String getScratchDirectory() throws RemoteException {
		return _prop.getProperty("scratch_directory");
	}

	@Override
	public String getArchiveDirectory() throws RemoteException {
		return _prop.getProperty("archive_directory");
	}

	@Override
	public FileTree getScratchTreeStructure() throws RemoteException {
		return _scratchTreeStructure;
	}

	@Override
	public FileTree getArchiveTreeStructure() throws RemoteException {
		return _archiveTreeStructure;
	}
	
	public void updateStructure() throws RemoteException{
		_scratchTreeStructure = new FileTree(this.getScratchPath());
		_archiveTreeStructure = new FileTree(this.getArchivePath());
	}

	@Override
	public void archivePath(TreePath tree) throws RemoteException, IOException, Exception {
		String scratch = getScratchDrive()+StringUtils.join(tree.getPath(), "/");
		String archive = this.getArchiveDrive();
		
		File tmp = new File(archive+"/"+StringUtils.join(Arrays.copyOf(tree.getPath(),tree.getPath().length-1),"/"));
		tmp.mkdirs();
		
		String command = "rsync -a "+scratch+" "+tmp.getAbsolutePath();
		Process proc = Runtime.getRuntime().exec(command);
		proc.waitFor();
	}

	@Override
	public String getScratchDrive() throws RemoteException {
		return _prop.getProperty("scratch_drive");
	}

	@Override
	public String getArchiveDrive() throws RemoteException {
		return _prop.getProperty("archive_drive");
	}

	@Override
	public String getScratchPath() throws RemoteException {
		return this.getScratchDrive()+this.getScratchDirectory();
	}

	@Override
	public String getArchivePath() throws RemoteException {
		return this.getArchiveDrive()+this.getArchiveDirectory();
	}
	
	@Override
	public void createScratchDirectory(String path) throws RemoteException{
		new File(getScratchPath()+"/"+path).mkdirs();
	}
	
	@Override
	public void createPCRDirectory(String species, String description, String project, String parent_path, String title, String summary, 
			String overall_design, String contributor, String growth_protocol, String treatment_protocol, String extract_protocol, 
			String label_protocol, String data_processing, String value_definition)
			throws RemoteException {
		
		String folder_name = get_folder_name(title,species,description,project,parent_path)+"/";

		Workbook template = Workbook.getWorkbook(getClass().getClassLoader().getResourceAsStream("PCR_template.xls"));
		WritableWorkbook wbCopy = Workbook.createWorkbook(new File(folder_name+"metadata.xls"),template);
		
		WritableSheet sheet = wbCopy.getSheet("TEMPLATE");
		
		sheet.addCell(new Label(1,10,title));
		sheet.addCell(new Label(1,11,summary));
		sheet.addCell(new Label(1,13,info.get_overall_design()));
		sheet.addCell(new Label(1,14,info.get_contributor()));
				
		sheet.addCell(new Label(1,30,_view.get_growthProtocolTxtArea().getText()));
		sheet.addCell(new Label(1,31,_view.get_treatmentProtocolTxtArea().getText()));
		sheet.addCell(new Label(1,32,_view.get_extractProtocolTxtArea().getText()));
		sheet.addCell(new Label(1,33,_view.get_labelProtocolTxtArea().getText()));
		sheet.addCell(new Label(1,36,_view.get_dataProcessingTxtArea().getText()));
		sheet.addCell(new Label(1,37,_view.get_valueDefinitionTxtArea().getText()));
		wbCopy.write();
		wbCopy.close();
	}
	
	public String get_folder_name(String title, String species, String description, String project_name, String parent_path){
		Calendar cal = Calendar.getInstance();
		String year = String.valueOf(cal.get(Calendar.YEAR));
		String month = String.format("%02d",cal.get(Calendar.MONTH)+1);
		String day = String.format("%02d",cal.get(Calendar.DAY_OF_MONTH));
		
		String modified_title = WordUtils.capitalizeFully(title).replaceAll("\\s+", "");
		String modified_description = WordUtils.capitalizeFully(description).replaceAll("\\s", "");
		return parent_path+"/"+year+month+day+"_"+project_name+"_"+modified_title+"_"+species+"_"+modified_description;
	}

    public static void copyFolder(File src, File dest)
        	throws IOException{
        	
        	if(src.isDirectory()){
        		
        		//if directory not exists, create it
        		if(!dest.exists()){
        		   dest.mkdir();
        		   System.out.println("Directory copied from " 
                                  + src + "  to " + dest);
        		}
        		
        		//list all the directory contents
        		String files[] = src.list();
        		
        		for (String file : files) {
        		   //construct the src and dest file structure
        		   File srcFile = new File(src, file);
        		   File destFile = new File(dest, file);
        		   //recursive copy
        		   copyFolder(srcFile,destFile);
        		}
        	   
        	}else{
        		//if file, then copy it
        		//Use bytes stream to support all file types
        		InputStream in = new FileInputStream(src);
        	        OutputStream out = new FileOutputStream(dest); 
        	                     
        	        byte[] buffer = new byte[1024];
        	    
        	        int length;
        	        //copy the file content in bytes 
        	        while ((length = in.read(buffer)) > 0){
        	    	   out.write(buffer, 0, length);
        	        }
     
        	        in.close();
        	        out.close();
        	        System.out.println("File copied from " + src + " to " + dest);
        	}
        }


}
