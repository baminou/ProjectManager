package controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.Vector;

import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import app.Project;
import app.ProjectConventionException;
import view.GeneralInfoView;
import epi.GeneralInfoObserver;

public class GeneralInfoController {
	private GeneralInfoView _view = new GeneralInfoView();
	private SelectExistingProjectController _selectProjectController;
	private Project _project;
	private static GeneralInfoController instance = null;
	private Vector<GeneralInfoObserver> _observers = new Vector<GeneralInfoObserver>();
	
	public static GeneralInfoController getInstance(){
		if(instance == null){
			instance = new GeneralInfoController();
			instance._disable();
		}
		return instance;
	}
	
	private GeneralInfoController(){
		_selectProjectController = new SelectExistingProjectController();
		_view.get_resetBtn().addActionListener(new ResetBtnActionListener());
		_view.get_experimentList().addListSelectionListener(new ExperimentListSelectionListener());
		_view.get_selectExistingProjectBtn().addActionListener(new SelectExistingProjectBtnActionListener());
		//_selectProjectController = new SelectExistingProjectController();
		//init();
	}
	
	public void init(){
		_disable();
	}
	
	public class ResetBtnActionListener implements ActionListener{
		@Override
		public void actionPerformed(ActionEvent e) {
			reset();
		}
	}
	
	public class ExperimentListSelectionListener implements ListSelectionListener{
		@Override
		public void valueChanged(ListSelectionEvent arg0) {
			for(GeneralInfoObserver observer: _observers){
				observer.experimentListChange(_view.get_experimentList().getSelectedIndex(), _view.get_experimentList().getSelectedValue().toString());
			}
			//_view.get_experimentLbl().setText(_view.get_experimentList().getSelectedValue().toString());
		}
	}
	
	public class SelectExistingProjectBtnActionListener implements ActionListener{
		@Override
		public void actionPerformed(ActionEvent arg0) {
				try {
					_project = _selectProjectController.show();
					if(_project!=null){
						_view.get_projectTitle().setText(_project.get_title());
						_view.get_projectYear().setText(String.valueOf(_project.get_year()));
						_view.get_projectVersion().setText(String.valueOf(_project.get_version()));
					}
					_enable();
				} catch (ProjectConventionException e) {
					JOptionPane.showMessageDialog(null, e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
				} catch (RemoteException e) {
					JOptionPane.showMessageDialog(null, e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
				} catch (IOException e) {
					JOptionPane.showMessageDialog(null, e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
				} catch (NotBoundException e) {
					JOptionPane.showMessageDialog(null, e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
				}
				_enable();
		}
	}

	public GeneralInfoView get_view() {
		return _view;
	}
	public void set_view(GeneralInfoView _view) {
		this._view = _view;
	}
	
	

	public Vector<GeneralInfoObserver> get_observers() {
		return _observers;
	}
	public void set_observers(Vector<GeneralInfoObserver> _observers) {
		this._observers = _observers;
	}
	
	private void _disable(){
		_view.get_experimentList().setEnabled(false);
		_view.get_titleTxtField().setEnabled(false);
		_view.get_speciesComboBox().setEnabled(false);
		_view.get_descriptionTxtField().setEnabled(false);
		_view.get_summaryTextArea().setEnabled(false);
		_view.get_overallDesignTxtArea().setEnabled(false);
		_view.get_contributorTxtField().setEnabled(false);
		for(GeneralInfoObserver observer : _observers){
			observer.disable();
		}
	}
	
	private void _enable(){
		_view.get_experimentList().setEnabled(true);
		_view.get_titleTxtField().setEnabled(false);
		_view.get_speciesComboBox().setEnabled(false);
		_view.get_descriptionTxtField().setEnabled(false);
		_view.get_summaryTextArea().setEnabled(false);
		_view.get_overallDesignTxtArea().setEnabled(false);
		_view.get_contributorTxtField().setEnabled(false);
		for(GeneralInfoObserver observer : _observers){
			observer.enable();
		}
	}
	
	public void reset() {
		_project = null;
		_view.get_projectTitle().setText(null);
		_view.get_projectVersion().setText(null);
		_view.get_projectYear().setText(null);
		_view.reset();
		
		for(GeneralInfoObserver observer : _observers){
			observer.reset();
			observer.disable();
		}
		
		_disable();
	}
	public SelectExistingProjectController get_selectProjectController() {
		return _selectProjectController;
	}

	public void set_selectProjectController(
			SelectExistingProjectController _selectProjectController) {
		this._selectProjectController = _selectProjectController;
	}

	public Project get_project() {
		return _project;
	}

	public void set_project(Project _project) {
		this._project = _project;
	}
	
}
